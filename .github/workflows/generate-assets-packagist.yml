name: Build and Publish Plugin

on:
  push:
    branches:
      - main  # This triggers the workflow on every push to the `main` branch

      #on:
      #push:
      #tags:
      #- 'v*'  # This will trigger the workflow on tags like v1.0.1, v1.0.2, etc.

jobs:
  generate-assets-and-commit-them:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITACTIONS_TOKEN }}  # Authenticate with the token

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'  # Adjust to your required Node.js version

      - name: Install dependencies and generate assets
        run: |
          sudo apt-get update
          sudo apt-get install -y make  # Install make utility if it's not available by default
          make init skip-composer  # Run your custom Makefile command

      - name: Print current directory and list assets
        run: |
          echo "Current directory: $(pwd)"
          echo "Contents of the repository:"
          ls -l assets/
          echo "Contents of assets/dist folder:"
          ls -lR assets/dist/

      - name: Create tag after generating dist folder
        run: |
          # Create a version tag after the dist folder is created
          VERSION_TAG="v$(date +%Y%m%d%H%M%S)"  # Use timestamp or your versioning method
          git tag $VERSION_TAG
          git push origin $VERSION_TAG

      - name: Upload dist folder as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-folder
          path: assets/dist  # Upload the dist folder for the next job


  create-packagist-release:
    runs-on: ubuntu-latest
    needs: generate-assets-and-commit-them  # This job depends on the generate-assets-and-commit-them job
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download dist folder artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-folder
          path: assets/dist  # Upload the dist folder for the next job

      - name: Print contents of dist folder
        run: |
          echo "Contents of the assets folder:"
          ls -l assets/  # Check if the dist folder is properly downloaded
          echo "Contents of the dist folder:"
          ls -l assets/dist  # Check if the dist folder is properly downloaded

      - name: Create a release on Packagist
        run: |
          # Check if dist folder exists and contains files
          if [ ! -d "assets/dist" ] || [ -z "$(ls -A assets/dist)" ]; then
            echo "Error: dist folder is empty or not found."
            exit 1
          fi
          
          # Packagist API token
          PACKAGIST_TOKEN="${{ secrets.PACKAGIST_TOKEN }}"  # Store your token in GitHub Secrets
          
          # Create a release tag from the Git tag name
          RELEASE_TAG="${GITHUB_REF#refs/tags/}"
          
          # Print debug info before uploading to Packagist
          echo "Uploading files to Packagist..."
          
          # Loop over all files in dist folder and upload them
          for file in assets/dist/*; do
          curl -u "${{ secrets.PACKAGIST_TOKEN }}:" -X POST -F "file=@$file" \
          -F "package[version]=$RELEASE_TAG" \
          -F "repository=https://github.com/puyaalexxx/devhunters-fw" \
          https://packagist.org/api/submit
          done
        env:
          PACKAGIST_TOKEN: ${{ secrets.PACKAGIST_TOKEN }}

