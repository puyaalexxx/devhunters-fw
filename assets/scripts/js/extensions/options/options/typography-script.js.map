{"version":3,"file":"scripts/js/extensions/options/options/typography-script.js","mappings":"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","sources":["webpack:///external var \"jQuery\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./assets/scripts/ts/extensions/options/options/typography.ts"],"sourcesContent":["module.exports = jQuery;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import jQuery from \"jquery\";\n\n(function ($: JQueryStatic): void {\n    \"use strict\";\n\n    class Typography {\n        //typography reference\n        private $_typography;\n\n        private $_preview_area;\n        private $_fonts_dropdown;\n        private $_font_weight_dropdown;\n        private $_font_style_dropdown;\n        private $_font_subsets_dropdown;\n        private $_text_transform_dropdown;\n        private $_text_decoration_dropdown;\n        private _font_prefix: string;\n        private $_font_type_hidden_input;\n        private $_font_path_hidden_input;\n        //store selected google font name\n        private _selected_google_font_name = \"\";\n\n        constructor($typography: JQuery<HTMLElement>) {\n            //typography reference\n            this.$_typography = $typography;\n            //this class reference\n            const $thisClass = this;\n\n            //preview area div\n            this.$_preview_area = this.$_typography.children(\".dht-field-child-typography-preview\");\n            //fonts dropdown\n            this.$_fonts_dropdown = this.$_typography.find(\".dht-typography\");\n            //font weights dropdown\n            this.$_font_weight_dropdown = this.$_typography.find(\".dht-typography-weight\");\n            //font styles dropdown\n            this.$_font_style_dropdown = this.$_typography.find(\".dht-typography-style\");\n            //font subsets\n            this.$_font_subsets_dropdown = this.$_typography.find(\".dht-typography-subsets\");\n            //text transform\n            this.$_text_transform_dropdown = this.$_typography.find(\".dht-typography-transform\");\n            //text decoration\n            this.$_text_decoration_dropdown = this.$_typography.find(\".dht-typography-decoration\");\n            //font prefix\n            this._font_prefix = this.$_fonts_dropdown.attr(\"data-font-prefix\")!;\n            //font type hidden input\n            this.$_font_type_hidden_input = this.$_fonts_dropdown.siblings(\".dht-typography-font-type-hidden\");\n            //font path hidden input\n            this.$_font_path_hidden_input = this.$_fonts_dropdown.siblings(\".dht-typography-path-hidden\");\n\n            //set saved values\n            this._setHeaderFontFromSavedValues($thisClass);\n\n            //font family dropdown\n            this._fontDropdown($thisClass);\n\n            //font weights dropdown\n            this._fontWeightsDropdown($thisClass);\n\n            //font styles dropdown\n            this._fontStylesDropdown($thisClass);\n\n            //font subsets dropdown\n            this._fontSubsetsDropdown($thisClass);\n\n            //text transform dropdown\n            this._textTransformDropdown($thisClass);\n\n            //text decoration dropdown\n            this._textDecorationDropdown($thisClass);\n        }\n\n        /**\n         * init fonts dropdown\n         *\n         * @param $thisClass : this\n         *\n         * @return void\n         */\n        private _fontDropdown($thisClass: this): void {\n            this.$_fonts_dropdown.select2({\n                allowClear: true,\n            });\n            this.$_fonts_dropdown.on(\"change\", function () {\n                const $selected_font = $(this);\n\n                //get font type (google, standard, divi)\n                const font_type = String($selected_font.find(\"option:selected\").attr(\"data-font-type\"))!;\n\n                //get the selected font family\n                const font_family: string = String($selected_font.val())!.replace(new RegExp(`^${$thisClass._font_prefix}-`), \"\");\n\n                //apply font to preview area\n                $thisClass.$_preview_area.css(\"font-family\", font_family);\n\n                //if Google font\n                if (font_type === \"google\") {\n                    $thisClass._googleFontsManipulations($thisClass, $selected_font, font_family);\n                } else if (font_type === \"divi\") {\n                    $thisClass._diviFontsManipulations($thisClass, $selected_font, font_family);\n                } else {\n                    $thisClass._standardFontsManipulations($thisClass, $selected_font);\n                }\n            });\n        }\n\n        /**\n         * Google fonts manipulations\n         *\n         * @param $thisClass : this\n         * @param $selected_font : JQuery<HTMLElement>\n         * @param font_family : string\n         *\n         * @return void\n         */\n        private _googleFontsManipulations($thisClass: this, $selected_font: JQuery<HTMLElement>, font_family: string): void {\n            //set font type input value\n            $thisClass.$_font_type_hidden_input.attr(\"value\", \"google\");\n\n            //set font path input value\n            $thisClass.$_font_path_hidden_input.attr(\"value\", \"\");\n\n            //variable used in other dropdowns\n            $thisClass._selected_google_font_name = font_family;\n\n            //get the selected Google font - font subsets\n            const font_subsets = String($selected_font.find(\"option:selected\").attr(\"data-font-subsets\"))!;\n            //include the font link for preview\n            $thisClass._buildFontLink(font_family);\n\n            //add Google font - font weights to the font weights dropdown\n            const font_weights = $selected_font.find(\"option:selected\").attr(\"data-font-weights\")!;\n            $thisClass._populateFontWeightDropdown($thisClass, $selected_font, font_weights);\n\n            //add Google font - font subsets to the font subsets dropdown\n            $thisClass._populateFontSubsetsDropdown($thisClass, font_subsets);\n\n            // Trigger change event to update Select2\n            $thisClass.$_font_weight_dropdown.trigger(\"change\");\n        }\n\n        /**\n         * Divi fonts manipulations\n         *\n         * @param $thisClass : this\n         * @param $selected_font : JQuery<HTMLElement>\n         * @param font_family : string\n         *\n         * @return void\n         */\n        private _diviFontsManipulations($thisClass: this, $selected_font: JQuery<HTMLElement>, font_family: string): void {\n            //set font type input value\n            $thisClass.$_font_type_hidden_input.attr(\"value\", \"divi\");\n\n            //get font path\n            const font_path = String($selected_font.find(\"option:selected\").attr(\"data-font-path\"))!;\n            //set font path input value\n            $thisClass.$_font_path_hidden_input.attr(\"value\", font_path);\n\n            //preview css code (font face)\n            $thisClass._setStyleTagCSS($thisClass, font_family, font_path);\n\n            //no subsets present for standard fonts\n            $thisClass.$_font_subsets_dropdown.empty().trigger(\"change\");\n\n            //add Divi font - font weights to the font weights dropdown\n            const font_weights = $selected_font.find(\"option:selected\").attr(\"data-font-weights\")!;\n            $thisClass._populateFontWeightDropdown($thisClass, $selected_font, font_weights);\n        }\n\n        /**\n         * standard fonts manipulations\n         *\n         * @param $thisClass : this\n         * @param $selected_font : JQuery<HTMLElement>\n         *\n         * @return void\n         */\n        private _standardFontsManipulations($thisClass: this, $selected_font: JQuery<HTMLElement>): void {\n            //set font type input value\n            $thisClass.$_font_type_hidden_input.attr(\"value\", \"standard\");\n            //set font path input value\n            $thisClass.$_font_path_hidden_input.attr(\"value\", \"\");\n\n            //no subsets present for standard fonts\n            $thisClass.$_font_subsets_dropdown.empty().trigger(\"change\");\n\n            //restore the standard font weights\n            const font_weights = $thisClass.$_font_weight_dropdown.attr(\"data-standard-font-weights\")!;\n            $thisClass._populateFontWeightDropdown($thisClass, $selected_font, font_weights);\n        }\n\n        /**\n         * font weights dropdown\n         *\n         * @param $thisClass : this\n         *\n         * @return void\n         */\n        private _fontWeightsDropdown($thisClass: this): void {\n            this.$_font_weight_dropdown.select2({\n                allowClear: true,\n            });\n            this.$_font_weight_dropdown.on(\"change\", function () {\n                const font_weight = String($(this).val())!;\n\n                //include the font link for preview + font weight\n                if (font_weight.length !== 0) {\n                    const fontLink =\n                        \"https://fonts.googleapis.com/css?family=\" + $thisClass._selected_google_font_name.replace(/\\s+/g, \"+\") + \":\" + font_weight;\n                    $('<link href=\"' + fontLink + '\" rel=\"stylesheet\">').appendTo(\"head\");\n                }\n\n                $thisClass.$_preview_area.css(\"font-weight\", font_weight);\n            });\n        }\n\n        /**\n         * font subsets dropdown\n         *\n         * @param $thisClass : this\n         *\n         * @return void\n         */\n        private _fontSubsetsDropdown($thisClass: this): void {\n            this.$_font_subsets_dropdown.select2({\n                allowClear: true,\n            });\n        }\n\n        /**\n         * font styles dropdown\n         *\n         * @param $thisClass : this\n         *\n         * @return void\n         */\n        private _fontStylesDropdown($thisClass: this): void {\n            this.$_font_style_dropdown.select2({\n                allowClear: true,\n            });\n            this.$_font_style_dropdown.on(\"change\", function () {\n                const font_style = String($(this).val());\n\n                $thisClass.$_preview_area.css(\"font-style\", font_style);\n            });\n        }\n\n        /**\n         * text transform dropdown\n         *\n         * @param $thisClass : this\n         *\n         * @return void\n         */\n        private _textTransformDropdown($thisClass: this): void {\n            this.$_text_transform_dropdown.select2({\n                allowClear: true,\n            });\n            this.$_text_transform_dropdown.on(\"change\", function () {\n                const text_transform = String($(this).val());\n\n                //reset css\n                $thisClass.$_preview_area.css(\"font-variant\", \"\");\n                $thisClass.$_preview_area.css(\"text-transform\", \"\");\n\n                if (text_transform === \"small-caps\") {\n                    $thisClass.$_preview_area.css(\"font-variant\", text_transform);\n                } else {\n                    $thisClass.$_preview_area.css(\"text-transform\", text_transform);\n                }\n            });\n        }\n\n        /**\n         * text decoration dropdown\n         *\n         * @param $thisClass : this\n         *\n         * @return void\n         */\n        private _textDecorationDropdown($thisClass: this): void {\n            this.$_text_decoration_dropdown.select2({\n                allowClear: true,\n            });\n            this.$_text_decoration_dropdown.on(\"change\", function () {\n                const text_decoration = String($(this).val());\n\n                $thisClass.$_preview_area.css(\"text-decoration\", text_decoration);\n            });\n        }\n\n        /**\n         * populate font weight dropdown\n         *\n         * @param $thisClass : this\n         * @param $selected_font : JQuery<HTMLElement>\n         * @param font_weights : string\n         *\n         * @return void\n         */\n        private _populateFontWeightDropdown($thisClass: this, $selected_font: JQuery<HTMLElement>, font_weights: string): void {\n            $thisClass.$_font_weight_dropdown.empty();\n\n            if (font_weights.length > 0) {\n                $thisClass.$_font_weight_dropdown.append(\"<option></option>\");\n                $.each(JSON.parse(font_weights), function (weight_value: string, weight_value_label: string) {\n                    $thisClass.$_font_weight_dropdown.append('<option value=\"' + weight_value + '\">' + weight_value_label + \"</option>\");\n                });\n            }\n        }\n\n        /**\n         * populate font subsets dropdown\n         *\n         * @param $thisClass : this\n         * @param font_subsets : JQuery<HTMLElement>\n         *\n         * @return void\n         */\n        private _populateFontSubsetsDropdown($thisClass: this, font_subsets: string): void {\n            $thisClass.$_font_subsets_dropdown.empty();\n            if (font_subsets.length > 0) {\n                $thisClass.$_font_subsets_dropdown.append(\"<option></option>\");\n                $.each(JSON.parse(font_subsets), function (index, subset) {\n                    $thisClass.$_font_subsets_dropdown.append('<option value=\"' + subset + '\">' + subset + \"</option>\");\n                });\n            }\n        }\n\n        /**\n         * set header font from saved values\n         *\n         * @param $thisClass : this\n         *\n         * @return void\n         */\n        private _setHeaderFontFromSavedValues($thisClass: this): void {\n            let saved_values = this.$_fonts_dropdown.attr(\"data-saved-values\")!;\n            //set the font link in header with the saved values if a Google font\n            if (saved_values.length > 0) {\n                const saved_vals = JSON.parse(saved_values);\n\n                if (saved_vals[\"font_type\"] === \"google\") {\n                    $thisClass._buildFontLink(saved_vals[\"font\"], saved_vals[\"weight\"]);\n                }\n            }\n        }\n\n        /**\n         * set style tag CSS for the Divi fonts\n         *\n         * @param $thisClass : this\n         * @param font_family : string\n         * @param font_path : string\n         *\n         * @return void\n         */\n        private _setStyleTagCSS($thisClass: this, font_family: string, font_path: string): void {\n            const $style_container = $thisClass.$_typography.find(\"#dht-custom-style\").children(\"style\");\n            $style_container.empty().append(\"@font-face {font-family: \" + font_family + \";src: url(\" + font_path + \") format('truetype');}\");\n        }\n\n        /**\n         * build Google font link\n         *\n         * @param font_family : string\n         * @param font_weight : string\n         *\n         * @return void\n         */\n        private _buildFontLink(font_family: string, font_weight = \"\"): void {\n            let fontLink = \"\";\n            if (font_weight.length > 0) {\n                fontLink = \"https://fonts.googleapis.com/css?family=\" + font_family.replace(/\\s+/g, \"+\") + \":\" + font_weight;\n                $('<link href=\"' + fontLink + '\" rel=\"stylesheet\">').appendTo(\"head\");\n            } else {\n                fontLink = \"https://fonts.googleapis.com/css?family=\" + font_family.replace(/\\s+/g, \"+\");\n            }\n\n            $('<link href=\"' + fontLink + '\" rel=\"stylesheet\">').appendTo(\"head\");\n        }\n    }\n\n    //init each typography option\n    $(\".dht-field-child-typography\").each(function () {\n        new Typography($(this));\n    });\n})(jQuery);\n"],"names":[],"sourceRoot":""}