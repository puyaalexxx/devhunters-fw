{"version":3,"file":"scripts/js/icon.js","mappings":"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","sources":["webpack:///./assets/scripts/ts/modules/extensions/options/fields/icon.ts"],"sourcesContent":["import jQuery from \"jquery\";\n\n(function($: JQueryStatic): void {\n    \"use strict\";\n\n    class Icon {\n        //icon reference\n        private $_icon;\n\n        constructor($icon: JQuery<HTMLElement>) {\n            //icon reference\n            this.$_icon = $icon;\n\n            //call ajax with default icons loaded (in our case - dashicons)\n            this._onPopupOpen();\n\n            // call ajax with icon type selected\n            this._callAjaxWithSelectedIcon();\n\n            //add selected icon on preview area\n            this._addSelectedIconOnPreviewArea();\n\n            //remove selected icon\n            this._removeSelectedIcon();\n\n            //search icons\n            this._searchIcon();\n        }\n\n        /**\n         * when opening the popup call ajax with default icons loaded (in our case - dashicons) or the saved one\n         *\n         * @return void\n         */\n        private _onPopupOpen(): void {\n            //this class reference\n            const $thisClass = this;\n\n            this.$_icon.off(\"click\", \".dht-thickbox\").on(\"click\", \".dht-thickbox\", function() {\n                const $this = $(this);\n\n                // icon group area from popup\n                const $dht_icons_type_group = $this.siblings(\".dht-modal-icons\").find(\".dht-icons-type-group\");\n\n                //clear search input\n                $dht_icons_type_group.children(\".dht-search-for-icon\").val(\"\");\n\n                //get selected icon from input\n                let selected_input_val = $this.siblings(\".dht-icon-select-value\").val()! as string;\n\n                //get saved icon values\n                let icon_type = \"dashicons\";\n                let icon = \"\";\n                if (selected_input_val.length > 0) {\n                    const selected_input_values = JSON.parse(selected_input_val);\n                    icon_type = selected_input_values[\"icon-type\"];\n                    // @ts-ignore\n                    icon = selected_input_values[\"icon-class\"];\n                }\n\n                //set icons dropdown with the saved icon type\n                $dht_icons_type_group.children(\".dht-icons-type\").val(icon_type);\n\n                //call ajax\n                $thisClass._getIconsViaAjax(icon_type, $dht_icons_type_group, icon);\n            });\n        }\n\n        /**\n         * call ajax with icon type selected\n         *\n         * @return void\n         */\n        private _callAjaxWithSelectedIcon(): void {\n            //this class reference\n            const $thisClass = this;\n\n            $(document)\n                .off(\"change\", \".dht-icons-preview-group .dht-icons-type\")\n                .on(\"change\", \".dht-icons-preview-group .dht-icons-type\", function() {\n                    const $this = $(this);\n                    const icon_type: string = $this.val()! as string;\n\n                    if (icon_type.length === 0) return;\n\n                    //in case the dropdown is changed quickly - reset it\n                    $this.parent(\".dht-icons-type-group\").siblings(\".dht-icons-preview\").empty();\n\n                    $thisClass._getIconsViaAjax(icon_type, $this.parent(\".dht-icons-type-group\"), \"\");\n                });\n        }\n\n        /**\n         * add selected icon on preview area\n         *\n         * @return void\n         */\n        private _addSelectedIconOnPreviewArea(): void {\n            $(document)\n                .off(\"click\", \"#TB_window .dht-icons-preview i\")\n                .on(\"click\", \"#TB_window .dht-icons-preview i\", function() {\n                    const $this = $(this);\n                    const icon_class = $this.attr(\"class\")!;\n                    const icon_code = $this.attr(\"data-code\");\n                    const $icons_dropdown = $this.parents(\".dht-icons-preview-group\").children(\".dht-icons-type-group\").children(\".dht-icons-type\");\n                    //get the popup id\n                    const popup_id = $this.parents(\".dht-icons-preview-group\").attr(\"data-popup-id\");\n\n                    //add selected icon on preview area and display it\n                    const popup = $(\"#\" + popup_id);\n                    popup\n                        .siblings(\".dht-icon-select-preview\")\n                        .children(\"i\")\n                        .removeAttr(\"class\")\n                        .addClass(icon_class)\n                        .parent()\n                        .addClass(\"dht-icon-select-preview-show\");\n\n                    //add selected icon to the hidden input to save it\n                    popup.siblings(\".dht-icon-select-value\").val(\n                        JSON.stringify({\n                            \"icon-type\": $icons_dropdown.val(),\n                            \"icon-class\": icon_class,\n                            \"icon-code\": icon_code,\n                        }),\n                    );\n                    //show remove button\n                    popup.siblings(\".dht-btn-remove\").addClass(\"dht-btn-show\");\n\n                    //close popup\n                    $(\"#TB_closeWindowButton\").trigger(\"click\");\n                });\n        }\n\n        /**\n         * remove selected icon\n         *\n         * @return void\n         */\n        private _removeSelectedIcon(): void {\n            this.$_icon.off(\"click\", \".dht-btn-remove\").on(\"click\", \".dht-btn-remove\", function() {\n                const $this = $(this);\n                $this.siblings(\".dht-icon-select-preview\").children(\"i\").removeAttr(\"class\").parent().removeClass(\"dht-icon-select-preview-show\");\n                $this.siblings(\".dht-icon-select-value\").val(\"\");\n                $this.removeClass(\"dht-btn-show\");\n\n                return false;\n            });\n        }\n\n        /**\n         * search icon in popup\n         *\n         * @return void\n         */\n        private _searchIcon(): void {\n            $(document)\n                .off(\"keyup\", \".dht-icons-preview-group .dht-search-for-icon\")\n                .on(\"keyup\", \".dht-icons-preview-group .dht-search-for-icon\", function() {\n                    const $this = $(this);\n                    const $popup = $this.parents(\".dht-icons-preview-group\");\n\n                    const searchText = $this.val().toLowerCase();\n\n                    // Filter list of icons based on search text\n                    $popup\n                        .children(\".dht-icons-preview\")\n                        .children(\"i\")\n                        .each(function() {\n                            const $this = $(this);\n\n                            const icon_class = $this.attr(\"class\")!.toLowerCase();\n\n                            if (icon_class.indexOf(searchText) === -1) {\n                                $this.hide();\n                            } else {\n                                $this.show();\n                            }\n                        });\n                });\n        }\n\n        private _getIconsViaAjax(icon_type: string, $dht_icons_type_group: JQuery<HTMLElement>, icon: string) {\n            //disable icons dropdown to prevent choose several times until ajax is finished\n            $dht_icons_type_group.children(\".dht-icons-type\").prop(\"disabled\", true);\n\n            $.ajax({\n                // @ts-ignore\n                url: dht_framework_ajax_info.ajax_url,\n                type: \"POST\",\n                dataType: \"json\",\n                data: {\n                    action: \"getOptionIcons\", // The name of your AJAX action\n                    data: { icon_type: icon_type, icon: icon },\n                },\n                beforeSend: function() {\n                    //show loading spinner\n                    $dht_icons_type_group.siblings(\".spinner\").css(\"visibility\", \"visible\");\n\n                    // clear popup\n                    $dht_icons_type_group.siblings(\".dht-icons-preview\").empty();\n                },\n                success: function(response) {\n                    if (response.success) {\n                        $dht_icons_type_group.siblings(\".dht-icons-preview\").append(response.data);\n                    } else {\n                        console.error(\"Ajax Response\", response);\n                    }\n                },\n                error: function(error) {\n                    console.error(\"AJAX error:\", error);\n                },\n                complete: function() {\n                    //hide loading spinner\n                    $dht_icons_type_group.siblings(\".spinner\").css(\"visibility\", \"hidden\");\n\n                    // Re-enable the dropdown after the request is complete\n                    $dht_icons_type_group.children(\".dht-icons-type\").prop(\"disabled\", false);\n                },\n            });\n        }\n    }\n\n    //init icon option\n    function init() {\n        $(\".dht-field-wrapper .dht-field-child-icons\").each(function() {\n            new Icon($(this));\n        });\n    }\n\n    // Initialize on page load\n    $(function() {\n        init();\n    });\n\n    // Initialize after AJAX content is loaded\n    $(document).on(\"dht_iconAjaxComplete\", function() {\n        init();\n    });\n})(jQuery);\n"],"names":["$","$icon","this","$_icon","_onPopupOpen","_callAjaxWithSelectedIcon","_addSelectedIconOnPreviewArea","_removeSelectedIcon","_searchIcon","$thisClass","off","on","$this","$dht_icons_type_group","siblings","find","children","val","selected_input_val","icon_type","icon","length","selected_input_values","JSON","parse","_getIconsViaAjax","document","parent","empty","icon_class","attr","icon_code","$icons_dropdown","parents","popup_id","popup","removeAttr","addClass","stringify","trigger","removeClass","$popup","searchText","toLowerCase","each","indexOf","hide","show","prop","ajax","url","dht_framework_ajax_info","ajax_url","type","dataType","data","action","beforeSend","css","success","response","append","console","error","complete","init","Icon"],"sourceRoot":""}