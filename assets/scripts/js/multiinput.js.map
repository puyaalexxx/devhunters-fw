{"version":3,"file":"scripts/js/multiinput.js","mappings":"oIAEA,SAAUA,GAGN,iBAII,WAAYC,GAERC,KAAKC,aAAeF,EAGpBC,KAAKE,YAGLF,KAAKG,cACT,CA2CJ,OApCY,YAAAD,UAAR,WACIF,KAAKC,aAAaG,IAAI,QAAS,uBAAuBC,GAAG,QAAS,uBAAuB,WACrF,IAAIC,EAAQR,EAAEE,MACVO,GAAiBD,EAAME,KAAK,cAEhC,GAAIF,EAAMG,QAAQ,+BAA+BC,SAAS,iCAAiCC,QAAUJ,EAGjG,OAFAK,QAAQd,EAAEE,MAAMQ,KAAK,mBAEd,EAEX,IAAIK,EAASP,EAAMQ,KAAK,iCAAiCC,QAEzDF,EAAOH,SAAS,SAASM,IAAI,IAE7BH,EAAOI,aAAaX,EACxB,GACJ,EAOQ,YAAAH,aAAR,WACIH,KAAKC,aAAaG,IAAI,QAAS,0BAA0BC,GAAG,QAAS,0BAA0B,WAC3F,IAAIC,EAAQR,EAAEE,MAEqF,IAA/FM,EAAMG,QAAQ,4BAA4BC,SAAS,iCAAiCC,OAMxFL,EAAMY,OAAO,iCAAiCC,SAL1CP,QAAQd,EAAEE,MAAMQ,KAAK,oBAM7B,GACJ,EACJ,EAxDA,GA2DA,SAASY,IACLtB,EAAE,kDAAkDuB,MAAK,WACrD,IAAIC,EAAWxB,EAAEE,MACrB,GACJ,CAGAF,GAAE,WACEsB,GACJ,IAGAtB,EAAEyB,UAAUlB,GAAG,8BAA8B,WACzCe,GACJ,GACH,CA7ED,C,MA6EG,G","sources":["webpack:///./assets/scripts/ts/modules/extensions/options/fields/multiinput.ts"],"sourcesContent":["import jQuery from \"jquery\";\n\n(function($: JQueryStatic): void {\n    \"use strict\";\n\n    class MultiInput {\n        //multiinput reference\n        private $_multiinput;\n\n        constructor($multiinput: JQuery<HTMLElement>) {\n            //multiinput reference\n            this.$_multiinput = $multiinput;\n\n            //add input\n            this._addInput();\n\n            //add input\n            this._removeInput();\n        }\n\n        /**\n         * add input\n         *\n         * @return void\n         */\n        private _addInput(): void {\n            this.$_multiinput.off(\"click\", \".dht-multiinput-add\").on(\"click\", \".dht-multiinput-add\", function() {\n                let $this = $(this);\n                let limit: number = +$this.attr(\"data-limit\")!;\n\n                if ($this.parents(\".dht-field-child-multiinput\").children(\".dht-multiinput-child-wrapper\").length >= limit) {\n                    confirm($(this).attr(\"data-add-text\"));\n\n                    return false;\n                }\n                let $field = $this.prev(\".dht-multiinput-child-wrapper\").clone();\n\n                $field.children(\"input\").val(\"\");\n\n                $field.insertBefore($this);\n            });\n        }\n\n        /**\n         * remove input\n         *\n         * @return void\n         */\n        private _removeInput(): void {\n            this.$_multiinput.off(\"click\", \".dht-multiinput-remove\").on(\"click\", \".dht-multiinput-remove\", function() {\n                let $this = $(this);\n\n                if ($this.parents(\".dht-field-child-wrapper\").children(\".dht-multiinput-child-wrapper\").length === 1) {\n                    confirm($(this).attr(\"data-remove-text\"));\n\n                    return;\n                }\n\n                $this.parent(\".dht-multiinput-child-wrapper\").remove();\n            });\n        }\n    }\n\n    //init each multiinput option\n    function init() {\n        $(\".dht-field-wrapper .dht-field-child-multiinput\").each(function() {\n            new MultiInput($(this));\n        });\n    }\n\n    // Initialize on page load\n    $(function() {\n        init();\n    });\n\n    // Initialize after AJAX content is loaded\n    $(document).on(\"dht_multiInputAjaxComplete\", function() {\n        init();\n    });\n})(jQuery);\n"],"names":["$","$multiinput","this","$_multiinput","_addInput","_removeInput","off","on","$this","limit","attr","parents","children","length","confirm","$field","prev","clone","val","insertBefore","parent","remove","init","each","MultiInput","document"],"sourceRoot":""}