{"version":3,"file":"scripts/js/typography.js","mappings":"oIAEA,SAAUA,GAGN,iBAiBI,WAAYC,GAFJ,KAAAC,2BAA6B,GAIjCC,KAAKC,aAAeH,EAEpB,IAAMI,EAAaF,KAGnBA,KAAKG,eAAiBH,KAAKC,aAAaG,SAAS,uCAEjDJ,KAAKK,iBAAmBL,KAAKC,aAAaK,KAAK,mBAE/CN,KAAKO,uBAAyBP,KAAKC,aAAaK,KAAK,0BAErDN,KAAKQ,sBAAwBR,KAAKC,aAAaK,KAAK,yBAEpDN,KAAKS,wBAA0BT,KAAKC,aAAaK,KAAK,2BAEtDN,KAAKU,0BAA4BV,KAAKC,aAAaK,KAAK,6BAExDN,KAAKW,2BAA6BX,KAAKC,aAAaK,KAAK,8BAEzDN,KAAKY,aAAeZ,KAAKK,iBAAiBQ,KAAK,oBAE/Cb,KAAKc,yBAA2Bd,KAAKK,iBAAiBU,SAAS,oCAE/Df,KAAKgB,yBAA2BhB,KAAKK,iBAAiBU,SAAS,+BAG/Df,KAAKiB,8BAA8Bf,GAGnCF,KAAKkB,cAAchB,GAGnBF,KAAKmB,qBAAqBjB,GAG1BF,KAAKoB,oBAAoBlB,GAGzBF,KAAKqB,qBAAqBnB,GAG1BF,KAAKsB,uBAAuBpB,GAG5BF,KAAKuB,wBAAwBrB,EACjC,CA0TJ,OAjTY,YAAAgB,cAAR,SAAsBhB,GAClBF,KAAKK,iBAAiBmB,QAAQ,CAC1BC,YAAY,IAGhBzB,KAAKK,iBAAiBqB,IAAI,mBAC1B1B,KAAKK,iBAAiBsB,GAAG,mBAAmB,WACxC,IAAMC,EAAiB/B,EAAEG,MAGnB6B,EAAYC,OAAOF,EAAetB,KAAK,mBAAmBO,KAAK,mBAG/DkB,EAAsBD,OAAOF,EAAeI,OAAQC,QAAQ,IAAIC,OAAO,WAAIhC,EAAWU,aAAY,MAAM,IAG9GV,EAAWC,eAAegC,IAAI,cAAeJ,GAG3B,WAAdF,EACA3B,EAAWkC,0BAA0BlC,EAAY0B,EAAgBG,GAC5C,SAAdF,EACP3B,EAAWmC,wBAAwBnC,EAAY0B,EAAgBG,GAE/D7B,EAAWoC,4BAA4BpC,EAAY0B,EAE3D,GACJ,EAWQ,YAAAQ,0BAAR,SAAkClC,EAAkB0B,EAAqCG,GAErF7B,EAAWY,yBAAyBD,KAAK,QAAS,UAGlDX,EAAWc,yBAAyBH,KAAK,QAAS,IAGlDX,EAAWH,2BAA6BgC,EAGxC,IAAMQ,EAAeT,OAAOF,EAAetB,KAAK,mBAAmBO,KAAK,sBAExEX,EAAWsC,eAAeT,GAG1B,IAAMU,EAAeb,EAAetB,KAAK,mBAAmBO,KAAK,qBACjEX,EAAWwC,4BAA4BxC,EAAY0B,EAAgBa,GAGnEvC,EAAWyC,6BAA6BzC,EAAYqC,GAGpDrC,EAAWK,uBAAuBqC,QAAQ,kBAC9C,EAWQ,YAAAP,wBAAR,SAAgCnC,EAAkB0B,EAAqCG,GAEnF7B,EAAWY,yBAAyBD,KAAK,QAAS,QAGlD,IAAMgC,EAAYf,OAAOF,EAAetB,KAAK,mBAAmBO,KAAK,mBAErEX,EAAWc,yBAAyBH,KAAK,QAASgC,GAGlD3C,EAAW4C,gBAAgB5C,EAAY6B,EAAac,GAGpD3C,EAAWO,wBAAwBsC,QAAQH,QAAQ,mBAGnD,IAAMH,EAAeb,EAAetB,KAAK,mBAAmBO,KAAK,qBACjEX,EAAWwC,4BAA4BxC,EAAY0B,EAAgBa,EACvE,EAUQ,YAAAH,4BAAR,SAAoCpC,EAAkB0B,GAElD1B,EAAWY,yBAAyBD,KAAK,QAAS,YAElDX,EAAWc,yBAAyBH,KAAK,QAAS,IAGlDX,EAAWO,wBAAwBsC,QAAQH,QAAQ,mBAGnD,IAAMH,EAAevC,EAAWK,uBAAuBM,KAAK,8BAC5DX,EAAWwC,4BAA4BxC,EAAY0B,EAAgBa,EACvE,EASQ,YAAAtB,qBAAR,SAA6BjB,GACzBF,KAAKO,uBAAuBiB,QAAQ,CAChCC,YAAY,IAEhBzB,KAAKO,uBAAuBmB,IAAI,mBAAmBC,GAAG,mBAAmB,WACrE,IAAMqB,EAAclB,OAAOjC,EAAEG,MAAMgC,OAGnC,GAA2B,IAAvBgB,EAAYC,OAAc,CAC1B,IAAMC,EACF,2CAA6ChD,EAAWH,2BAA2BkC,QAAQ,OAAQ,KAAO,IAAMe,EACpHnD,EAAE,eAAkBqD,EAAW,uBAA0BC,SAAS,OACtE,CAEAjD,EAAWC,eAAegC,IAAI,cAAea,EACjD,GACJ,EASQ,YAAA3B,qBAAR,SAA6BnB,GACzBF,KAAKS,wBAAwBe,QAAQ,CACjCC,YAAY,GAEpB,EASQ,YAAAL,oBAAR,SAA4BlB,GACxBF,KAAKQ,sBAAsBgB,QAAQ,CAC/BC,YAAY,IAEhBzB,KAAKQ,sBAAsBkB,IAAI,mBAAmBC,GAAG,mBAAmB,WACpE,IAAMyB,EAAatB,OAAOjC,EAAEG,MAAMgC,OAElC9B,EAAWC,eAAegC,IAAI,aAAciB,EAChD,GACJ,EASQ,YAAA9B,uBAAR,SAA+BpB,GAC3BF,KAAKU,0BAA0Bc,QAAQ,CACnCC,YAAY,IAEhBzB,KAAKU,0BAA0BgB,IAAI,mBAAmBC,GAAG,mBAAmB,WACxE,IAAM0B,EAAiBvB,OAAOjC,EAAEG,MAAMgC,OAGtC9B,EAAWC,eAAegC,IAAI,eAAgB,IAC9CjC,EAAWC,eAAegC,IAAI,iBAAkB,IAEzB,eAAnBkB,EACAnD,EAAWC,eAAegC,IAAI,eAAgBkB,GAE9CnD,EAAWC,eAAegC,IAAI,iBAAkBkB,EAExD,GACJ,EASQ,YAAA9B,wBAAR,SAAgCrB,GAC5BF,KAAKW,2BAA2Ba,QAAQ,CACpCC,YAAY,IAEhBzB,KAAKW,2BAA2Be,IAAI,mBAAmBC,GAAG,mBAAmB,WACzE,IAAM2B,EAAkBxB,OAAOjC,EAAEG,MAAMgC,OAEvC9B,EAAWC,eAAegC,IAAI,kBAAmBmB,EACrD,GACJ,EAWQ,YAAAZ,4BAAR,SAAoCxC,EAAkB0B,EAAqCa,GACvFvC,EAAWK,uBAAuBwC,QAE9BN,EAAaQ,OAAS,IACtB/C,EAAWK,uBAAuBgD,OAAO,qBACzC1D,EAAE2D,KAAKC,KAAKC,MAAMjB,IAAe,SAASkB,EAAsBC,GAC5D1D,EAAWK,uBAAuBgD,OAAO,kBAAqBI,EAAe,KAAQC,EAAqB,YAC9G,IAER,EAUQ,YAAAjB,6BAAR,SAAqCzC,EAAkBqC,GACnDrC,EAAWO,wBAAwBsC,QAC/BR,EAAaU,OAAS,IACtB/C,EAAWO,wBAAwB8C,OAAO,qBAC1C1D,EAAE2D,KAAKC,KAAKC,MAAMnB,IAAe,SAASsB,EAAOC,GAC7C5D,EAAWO,wBAAwB8C,OAAO,kBAAqBO,EAAS,KAAQA,EAAS,YAC7F,IAER,EASQ,YAAA7C,8BAAR,SAAsCf,GAClC,IAAI6D,EAAe/D,KAAKK,iBAAiBQ,KAAK,qBAE9C,GAAIkD,EAAad,OAAS,EAAG,CACzB,IAAMe,EAAaP,KAAKC,MAAMK,GAEE,WAA5BC,EAAsB,WACtB9D,EAAWsC,eAAewB,EAAiB,KAAGA,EAAmB,OAEzE,CACJ,EAWQ,YAAAlB,gBAAR,SAAwB5C,EAAkB6B,EAAqBc,GAClC3C,EAAWD,aAAaK,KAAK,qBAAqBF,SAAS,SACnE2C,QAAQQ,OAAO,4BAA8BxB,EAAc,aAAec,EAAY,yBAC3G,EAUQ,YAAAL,eAAR,SAAuBT,EAAqBiB,QAAA,IAAAA,IAAAA,EAAA,IACxC,IAAIE,EAAW,GACXF,EAAYC,OAAS,GACrBC,EAAW,2CAA6CnB,EAAYE,QAAQ,OAAQ,KAAO,IAAMe,EACjGnD,EAAE,eAAkBqD,EAAW,uBAA0BC,SAAS,SAElED,EAAW,2CAA6CnB,EAAYE,QAAQ,OAAQ,KAGxFpC,EAAE,eAAkBqD,EAAW,uBAA0BC,SAAS,OACtE,EACJ,EA1XA,GA6XA,SAASc,IACLpE,EAAE,kDAAkD2D,MAAK,WACrD,IAAIU,EAAWrE,EAAEG,MACrB,GACJ,CAGAH,GAAE,WACEoE,GACJ,IAGApE,EAAEsE,UAAUxC,GAAG,8BAA8B,WACzCsC,GACJ,GACH,CA/YD,C,MA+YG,G","sources":["webpack:///./assets/scripts/ts/modules/extensions/options/fields/typography.ts"],"sourcesContent":["import jQuery from \"jquery\";\n\n(function($: JQueryStatic): void {\n    \"use strict\";\n\n    class Typography {\n        //typography reference\n        private $_typography;\n\n        private $_preview_area;\n        private $_fonts_dropdown;\n        private $_font_weight_dropdown;\n        private $_font_style_dropdown;\n        private $_font_subsets_dropdown;\n        private $_text_transform_dropdown;\n        private $_text_decoration_dropdown;\n        private _font_prefix: string;\n        private $_font_type_hidden_input;\n        private $_font_path_hidden_input;\n        //store selected google font name\n        private _selected_google_font_name = \"\";\n\n        constructor($typography: JQuery<HTMLElement>) {\n            //typography reference\n            this.$_typography = $typography;\n            //this class reference\n            const $thisClass = this;\n\n            //preview area div\n            this.$_preview_area = this.$_typography.children(\".dht-field-child-typography-preview\");\n            //fonts dropdown\n            this.$_fonts_dropdown = this.$_typography.find(\".dht-typography\");\n            //font weights dropdown\n            this.$_font_weight_dropdown = this.$_typography.find(\".dht-typography-weight\");\n            //font styles dropdown\n            this.$_font_style_dropdown = this.$_typography.find(\".dht-typography-style\");\n            //font subsets\n            this.$_font_subsets_dropdown = this.$_typography.find(\".dht-typography-subsets\");\n            //text transform\n            this.$_text_transform_dropdown = this.$_typography.find(\".dht-typography-transform\");\n            //text decoration\n            this.$_text_decoration_dropdown = this.$_typography.find(\".dht-typography-decoration\");\n            //font prefix\n            this._font_prefix = this.$_fonts_dropdown.attr(\"data-font-prefix\")!;\n            //font type hidden input\n            this.$_font_type_hidden_input = this.$_fonts_dropdown.siblings(\".dht-typography-font-type-hidden\");\n            //font path hidden input\n            this.$_font_path_hidden_input = this.$_fonts_dropdown.siblings(\".dht-typography-path-hidden\");\n\n            //set saved values\n            this._setHeaderFontFromSavedValues($thisClass);\n\n            //font family dropdown\n            this._fontDropdown($thisClass);\n\n            //font weights dropdown\n            this._fontWeightsDropdown($thisClass);\n\n            //font styles dropdown\n            this._fontStylesDropdown($thisClass);\n\n            //font subsets dropdown\n            this._fontSubsetsDropdown($thisClass);\n\n            //text transform dropdown\n            this._textTransformDropdown($thisClass);\n\n            //text decoration dropdown\n            this._textDecorationDropdown($thisClass);\n        }\n\n        /**\n         * init fonts dropdown\n         *\n         * @param $thisClass : this\n         *\n         * @return void\n         */\n        private _fontDropdown($thisClass: this): void {\n            this.$_fonts_dropdown.select2({\n                allowClear: true,\n            });\n\n            this.$_fonts_dropdown.off(\"change.mychange\");\n            this.$_fonts_dropdown.on(\"change.mychange\", function() {\n                const $selected_font = $(this);\n\n                //get font type (google, standard, divi)\n                const font_type = String($selected_font.find(\"option:selected\").attr(\"data-font-type\"))!;\n\n                //get the selected font family\n                const font_family: string = String($selected_font.val())!.replace(new RegExp(`^${$thisClass._font_prefix}-`), \"\");\n\n                //apply font to preview area\n                $thisClass.$_preview_area.css(\"font-family\", font_family);\n\n                //if Google font\n                if (font_type === \"google\") {\n                    $thisClass._googleFontsManipulations($thisClass, $selected_font, font_family);\n                } else if (font_type === \"divi\") {\n                    $thisClass._diviFontsManipulations($thisClass, $selected_font, font_family);\n                } else {\n                    $thisClass._standardFontsManipulations($thisClass, $selected_font);\n                }\n            });\n        }\n\n        /**\n         * Google fonts manipulations\n         *\n         * @param $thisClass : this\n         * @param $selected_font : JQuery<HTMLElement>\n         * @param font_family : string\n         *\n         * @return void\n         */\n        private _googleFontsManipulations($thisClass: this, $selected_font: JQuery<HTMLElement>, font_family: string): void {\n            //set font type input value\n            $thisClass.$_font_type_hidden_input.attr(\"value\", \"google\");\n\n            //set font path input value\n            $thisClass.$_font_path_hidden_input.attr(\"value\", \"\");\n\n            //variable used in other dropdowns\n            $thisClass._selected_google_font_name = font_family;\n\n            //get the selected Google font - font subsets\n            const font_subsets = String($selected_font.find(\"option:selected\").attr(\"data-font-subsets\"))!;\n            //include the font link for preview\n            $thisClass._buildFontLink(font_family);\n\n            //add Google font - font weights to the font weights dropdown\n            const font_weights = $selected_font.find(\"option:selected\").attr(\"data-font-weights\")!;\n            $thisClass._populateFontWeightDropdown($thisClass, $selected_font, font_weights);\n\n            //add Google font - font subsets to the font subsets dropdown\n            $thisClass._populateFontSubsetsDropdown($thisClass, font_subsets);\n\n            // Trigger change event to update Select2\n            $thisClass.$_font_weight_dropdown.trigger(\"change.mychange\");\n        }\n\n        /**\n         * Divi fonts manipulations\n         *\n         * @param $thisClass : this\n         * @param $selected_font : JQuery<HTMLElement>\n         * @param font_family : string\n         *\n         * @return void\n         */\n        private _diviFontsManipulations($thisClass: this, $selected_font: JQuery<HTMLElement>, font_family: string): void {\n            //set font type input value\n            $thisClass.$_font_type_hidden_input.attr(\"value\", \"divi\");\n\n            //get font path\n            const font_path = String($selected_font.find(\"option:selected\").attr(\"data-font-path\"))!;\n            //set font path input value\n            $thisClass.$_font_path_hidden_input.attr(\"value\", font_path);\n\n            //preview css code (font face)\n            $thisClass._setStyleTagCSS($thisClass, font_family, font_path);\n\n            //no subsets present for standard fonts\n            $thisClass.$_font_subsets_dropdown.empty().trigger(\"change.mychange\");\n\n            //add Divi font - font weights to the font weights dropdown\n            const font_weights = $selected_font.find(\"option:selected\").attr(\"data-font-weights\")!;\n            $thisClass._populateFontWeightDropdown($thisClass, $selected_font, font_weights);\n        }\n\n        /**\n         * standard fonts manipulations\n         *\n         * @param $thisClass : this\n         * @param $selected_font : JQuery<HTMLElement>\n         *\n         * @return void\n         */\n        private _standardFontsManipulations($thisClass: this, $selected_font: JQuery<HTMLElement>): void {\n            //set font type input value\n            $thisClass.$_font_type_hidden_input.attr(\"value\", \"standard\");\n            //set font path input value\n            $thisClass.$_font_path_hidden_input.attr(\"value\", \"\");\n\n            //no subsets present for standard fonts\n            $thisClass.$_font_subsets_dropdown.empty().trigger(\"change.mychange\");\n\n            //restore the standard font weights\n            const font_weights = $thisClass.$_font_weight_dropdown.attr(\"data-standard-font-weights\")!;\n            $thisClass._populateFontWeightDropdown($thisClass, $selected_font, font_weights);\n        }\n\n        /**\n         * font weights dropdown\n         *\n         * @param $thisClass : this\n         *\n         * @return void\n         */\n        private _fontWeightsDropdown($thisClass: this): void {\n            this.$_font_weight_dropdown.select2({\n                allowClear: true,\n            });\n            this.$_font_weight_dropdown.off(\"change.mychange\").on(\"change.mychange\", function() {\n                const font_weight = String($(this).val())!;\n\n                //include the font link for preview + font weight\n                if (font_weight.length !== 0) {\n                    const fontLink =\n                        \"https://fonts.googleapis.com/css?family=\" + $thisClass._selected_google_font_name.replace(/\\s+/g, \"+\") + \":\" + font_weight;\n                    $(\"<link href=\\\"\" + fontLink + \"\\\" rel=\\\"stylesheet\\\">\").appendTo(\"head\");\n                }\n\n                $thisClass.$_preview_area.css(\"font-weight\", font_weight);\n            });\n        }\n\n        /**\n         * font subsets dropdown\n         *\n         * @param $thisClass : this\n         *\n         * @return void\n         */\n        private _fontSubsetsDropdown($thisClass: this): void {\n            this.$_font_subsets_dropdown.select2({\n                allowClear: true,\n            });\n        }\n\n        /**\n         * font styles dropdown\n         *\n         * @param $thisClass : this\n         *\n         * @return void\n         */\n        private _fontStylesDropdown($thisClass: this): void {\n            this.$_font_style_dropdown.select2({\n                allowClear: true,\n            });\n            this.$_font_style_dropdown.off(\"change.mychange\").on(\"change.mychange\", function() {\n                const font_style = String($(this).val());\n\n                $thisClass.$_preview_area.css(\"font-style\", font_style);\n            });\n        }\n\n        /**\n         * text transform dropdown\n         *\n         * @param $thisClass : this\n         *\n         * @return void\n         */\n        private _textTransformDropdown($thisClass: this): void {\n            this.$_text_transform_dropdown.select2({\n                allowClear: true,\n            });\n            this.$_text_transform_dropdown.off(\"change.mychange\").on(\"change.mychange\", function() {\n                const text_transform = String($(this).val());\n\n                //reset css\n                $thisClass.$_preview_area.css(\"font-variant\", \"\");\n                $thisClass.$_preview_area.css(\"text-transform\", \"\");\n\n                if (text_transform === \"small-caps\") {\n                    $thisClass.$_preview_area.css(\"font-variant\", text_transform);\n                } else {\n                    $thisClass.$_preview_area.css(\"text-transform\", text_transform);\n                }\n            });\n        }\n\n        /**\n         * text decoration dropdown\n         *\n         * @param $thisClass : this\n         *\n         * @return void\n         */\n        private _textDecorationDropdown($thisClass: this): void {\n            this.$_text_decoration_dropdown.select2({\n                allowClear: true,\n            });\n            this.$_text_decoration_dropdown.off(\"change.mychange\").on(\"change.mychange\", function() {\n                const text_decoration = String($(this).val());\n\n                $thisClass.$_preview_area.css(\"text-decoration\", text_decoration);\n            });\n        }\n\n        /**\n         * populate font weight dropdown\n         *\n         * @param $thisClass : this\n         * @param $selected_font : JQuery<HTMLElement>\n         * @param font_weights : string\n         *\n         * @return void\n         */\n        private _populateFontWeightDropdown($thisClass: this, $selected_font: JQuery<HTMLElement>, font_weights: string): void {\n            $thisClass.$_font_weight_dropdown.empty();\n\n            if (font_weights.length > 0) {\n                $thisClass.$_font_weight_dropdown.append(\"<option></option>\");\n                $.each(JSON.parse(font_weights), function(weight_value: string, weight_value_label: string) {\n                    $thisClass.$_font_weight_dropdown.append(\"<option value=\\\"\" + weight_value + \"\\\">\" + weight_value_label + \"</option>\");\n                });\n            }\n        }\n\n        /**\n         * populate font subsets dropdown\n         *\n         * @param $thisClass : this\n         * @param font_subsets : JQuery<HTMLElement>\n         *\n         * @return void\n         */\n        private _populateFontSubsetsDropdown($thisClass: this, font_subsets: string): void {\n            $thisClass.$_font_subsets_dropdown.empty();\n            if (font_subsets.length > 0) {\n                $thisClass.$_font_subsets_dropdown.append(\"<option></option>\");\n                $.each(JSON.parse(font_subsets), function(index, subset) {\n                    $thisClass.$_font_subsets_dropdown.append(\"<option value=\\\"\" + subset + \"\\\">\" + subset + \"</option>\");\n                });\n            }\n        }\n\n        /**\n         * set header font from saved values\n         *\n         * @param $thisClass : this\n         *\n         * @return void\n         */\n        private _setHeaderFontFromSavedValues($thisClass: this): void {\n            let saved_values = this.$_fonts_dropdown.attr(\"data-saved-values\")!;\n            //set the font link in header with the saved values if a Google font\n            if (saved_values.length > 0) {\n                const saved_vals = JSON.parse(saved_values);\n\n                if (saved_vals[\"font_type\"] === \"google\") {\n                    $thisClass._buildFontLink(saved_vals[\"font\"], saved_vals[\"weight\"]);\n                }\n            }\n        }\n\n        /**\n         * set style tag CSS for the Divi fonts\n         *\n         * @param $thisClass : this\n         * @param font_family : string\n         * @param font_path : string\n         *\n         * @return void\n         */\n        private _setStyleTagCSS($thisClass: this, font_family: string, font_path: string): void {\n            const $style_container = $thisClass.$_typography.find(\"#dht-custom-style\").children(\"style\");\n            $style_container.empty().append(\"@font-face {font-family: \" + font_family + \";src: url(\" + font_path + \") format('truetype');}\");\n        }\n\n        /**\n         * build Google font link\n         *\n         * @param font_family : string\n         * @param font_weight : string\n         *\n         * @return void\n         */\n        private _buildFontLink(font_family: string, font_weight = \"\"): void {\n            let fontLink = \"\";\n            if (font_weight.length > 0) {\n                fontLink = \"https://fonts.googleapis.com/css?family=\" + font_family.replace(/\\s+/g, \"+\") + \":\" + font_weight;\n                $(\"<link href=\\\"\" + fontLink + \"\\\" rel=\\\"stylesheet\\\">\").appendTo(\"head\");\n            } else {\n                fontLink = \"https://fonts.googleapis.com/css?family=\" + font_family.replace(/\\s+/g, \"+\");\n            }\n\n            $(\"<link href=\\\"\" + fontLink + \"\\\" rel=\\\"stylesheet\\\">\").appendTo(\"head\");\n        }\n    }\n\n    //init each typography option\n    function init() {\n        $(\".dht-field-wrapper .dht-field-child-typography\").each(function() {\n            new Typography($(this));\n        });\n    }\n\n    // Initialize on page load\n    $(function() {\n        init();\n    });\n\n    // Initialize after AJAX content is loaded\n    $(document).on(\"dht_typographyAjaxComplete\", function() {\n        init();\n    });\n})(jQuery);\n"],"names":["$","$typography","_selected_google_font_name","this","$_typography","$thisClass","$_preview_area","children","$_fonts_dropdown","find","$_font_weight_dropdown","$_font_style_dropdown","$_font_subsets_dropdown","$_text_transform_dropdown","$_text_decoration_dropdown","_font_prefix","attr","$_font_type_hidden_input","siblings","$_font_path_hidden_input","_setHeaderFontFromSavedValues","_fontDropdown","_fontWeightsDropdown","_fontStylesDropdown","_fontSubsetsDropdown","_textTransformDropdown","_textDecorationDropdown","select2","allowClear","off","on","$selected_font","font_type","String","font_family","val","replace","RegExp","css","_googleFontsManipulations","_diviFontsManipulations","_standardFontsManipulations","font_subsets","_buildFontLink","font_weights","_populateFontWeightDropdown","_populateFontSubsetsDropdown","trigger","font_path","_setStyleTagCSS","empty","font_weight","length","fontLink","appendTo","font_style","text_transform","text_decoration","append","each","JSON","parse","weight_value","weight_value_label","index","subset","saved_values","saved_vals","init","Typography","document"],"sourceRoot":""}