{"version":3,"file":"scripts/js/upload.js","mappings":"oIAEA,SAAUA,GAGN,iBAII,WAAYC,GAERC,KAAKC,SAAWF,EAGhBC,KAAKE,cAGLF,KAAKG,oBACT,CA+EJ,OAxEY,YAAAD,YAAR,WAEI,IAAME,EAAaJ,KAEnBA,KAAKC,SAASI,IAAI,QAAS,2BAA2BC,GAAG,QAAS,2BAA2B,WACzF,IAAMC,EAAQT,EAAEE,MACVQ,EAAgBD,EAAME,SAAS,2BAC/BC,EAAcH,EAAMI,KAAK,mBACzBC,EAAcL,EAAMI,KAAK,mBAGzBE,EAAkBC,GAAGC,MAAM,CAC7BC,MAAON,EACPO,OAAQ,CACJC,KAAMR,GAEVS,QAAS,CAAEC,KAAMR,GACjBS,UAAU,IAGdR,EAAgBR,IAAI,UAAUC,GAAG,UAAU,WACvC,IAAMgB,EAAaT,EAAgBU,QAAQC,IAAI,aAAaC,QAAQC,SACpEnB,EAAME,SAAS,oBAAoBE,KAAK,QAASW,EAAWK,KAC5DpB,EAAME,SAAS,oBAAoBmB,IAAIN,EAAWK,KAGlDnB,EAAcoB,IAAIN,EAAWO,GACjC,IAEAhB,EAAgBiB,OAGhB1B,EAAW2B,gBAAgBvB,EAAeK,EAC9C,GACJ,EAOQ,YAAAV,mBAAR,WACIH,KAAKC,SAASI,IAAI,QAAS,oBAAoBC,GAAG,QAAS,oBAAoB,WAC3E,IAAMC,EAAQT,EAAEE,MAGI,KAAhBO,EAAMqB,QACNrB,EAAME,SAAS,2BAA2BmB,IAAI,IAC9CrB,EAAMI,KAAK,QAAS,KAIpBJ,EAAMqB,MAAMI,OAAS,GACrBzB,EAAMI,KAAK,QAASJ,EAAMqB,MAElC,GACJ,EAUQ,YAAAG,gBAAR,SAAwBvB,EAAoCK,IAC7BL,EAAcoB,MACjB,GACpBf,EAAgBU,QAAQC,IAAI,aAAaS,IAAInB,GAAGC,MAAMO,WAAWd,EAAcoB,OAEvF,EACJ,EA5FA,GA+FA,SAASM,IACLpC,EAAE,mDAAmDqC,MAAK,WACtD,IAAIC,EAAOtC,EAAEE,MACjB,GACJ,CAGAF,GAAE,WACEoC,GACJ,IAGApC,EAAEuC,UAAU/B,GAAG,0BAA0B,WACrC4B,GACJ,GACH,CAjHD,C,MAiHG,G","sources":["webpack:///./assets/scripts/ts/modules/extensions/options/fields/upload.ts"],"sourcesContent":["import jQuery from \"jquery\";\n\n(function($: JQueryStatic): void {\n    \"use strict\";\n\n    class Upload {\n        //upload reference\n        private $_upload;\n\n        constructor($upload: JQuery<HTMLElement>) {\n            //upload reference\n            this.$_upload = $upload;\n\n            //upload item on click\n            this._uploadItem();\n\n            //remove item when input is cleared\n            this._removeItemOnInput();\n        }\n\n        /**\n         * upload item\n         *\n         * @return void\n         */\n        private _uploadItem(): void {\n            //this class reference\n            const $thisClass = this;\n\n            this.$_upload.off(\"click\", \".dht-upload-item-button\").on(\"click\", \".dht-upload-item-button\", function() {\n                const $this = $(this);\n                const $hidden_input = $this.siblings(\".dht-upload-item-hidden\");\n                const $media_text = $this.attr(\"data-media-text\");\n                const $media_type = $this.attr(\"data-media-type\");\n\n                //open WP media popup\n                const custom_uploader = wp.media({\n                    title: $media_text,\n                    button: {\n                        text: $media_text,\n                    },\n                    library: { type: $media_type },\n                    multiple: false,\n                });\n\n                custom_uploader.off(\"select\").on(\"select\", function() {\n                    const attachment = custom_uploader.state().get(\"selection\").first().toJSON();\n                    $this.siblings(\".dht-upload-item\").attr(\"value\", attachment.url);\n                    $this.siblings(\".dht-upload-item\").val(attachment.url);\n\n                    //add attachment id to the hidden input\n                    $hidden_input.val(attachment.id);\n                });\n\n                custom_uploader.open();\n\n                //open the WP media popup with a preselected attachment id if exist\n                $thisClass._preSelectItems($hidden_input, custom_uploader);\n            });\n        }\n\n        /**\n         * remove item when input is cleared\n         *\n         * @return void\n         */\n        private _removeItemOnInput(): void {\n            this.$_upload.off(\"input\", \".dht-upload-item\").on(\"input\", \".dht-upload-item\", function() {\n                const $this = $(this);\n\n                // Check if the input field is empty and remove the item\n                if ($this.val() === \"\") {\n                    $this.siblings(\".dht-upload-item-hidden\").val(\"\");\n                    $this.attr(\"value\", \"\");\n                }\n\n                //change input value when adding a new link\n                if ($this.val().length > 0) {\n                    $this.attr(\"value\", $this.val());\n                }\n            });\n        }\n\n        /**\n         * preselect selected item in Media popup\n         *\n         * @param $hidden_input : JQuery<HTMLElement>\n         * @param custom_uploader : any\n         *\n         * @return void\n         */\n        private _preSelectItems($hidden_input: JQuery<HTMLElement>, custom_uploader: any) {\n            const $hidden_input_val = +$hidden_input.val()!;\n            if ($hidden_input_val > 0) {\n                custom_uploader.state().get(\"selection\").add(wp.media.attachment($hidden_input.val()));\n            }\n        }\n    }\n\n    //init each upload button option\n    function init() {\n        $(\".dht-field-wrapper .dht-field-child-upload-item\").each(function() {\n            new Upload($(this));\n        });\n    }\n\n    // Initialize on page load\n    $(function() {\n        init();\n    });\n\n    // Initialize after AJAX content is loaded\n    $(document).on(\"dht_uploadAjaxComplete\", function() {\n        init();\n    });\n})(jQuery);\n"],"names":["$","$upload","this","$_upload","_uploadItem","_removeItemOnInput","$thisClass","off","on","$this","$hidden_input","siblings","$media_text","attr","$media_type","custom_uploader","wp","media","title","button","text","library","type","multiple","attachment","state","get","first","toJSON","url","val","id","open","_preSelectItems","length","add","init","each","Upload","document"],"sourceRoot":""}